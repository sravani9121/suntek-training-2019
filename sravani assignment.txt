1.
#include<stdio.h>
#include<string.h>

int main()

{

char str[1000], ch
int i,frequency = 0;
 
printf("Enter a string: ");
   
gets(str);
  
printf("Enter a character to find the frequency: ");
 
scanf("%c",&ch);
  
for(i = 0; str[i] != '\0';++i)
  
{
      
if(ch == str[i])
     
   ++frequency;
  
 }
  
printf("Frequency of %c = %d", ch, frequency);
 
  return 0;

}


=============================================================================

2.
#include <stdio.h>
 
int find_anagram(char [], char []);
 
int main()
{
    char str1[100], str2[100];
    int flag;
 
    printf("Enter the string\n");
    gets(str1);
    printf("Enter another string\n");
    gets(str2);
    flag = find_anagram(str1, str2);
    if (flag == 1)
        printf(""%s" and "%s" are anagrams.\n", str1, str2);
    else
        printf(""%s" and "%s" are not anagrams.\n", str1, str2);
    return 0;
}
 
int find_anagram(char str1[], char str2[])
{
    int num1[26] = {0}, num2[26] = {0}, i = 0;
 
    while (str1[i] != '\0')
    {
        num1[str1[i] - 'a']++;
        i++;
    }
    i = 0;
    while (str2[i] != '\0')
    {
        num2[str2[i] -'a']++;
        i++;
    }
    for (i = 0; i < 26; i++)
    {
        if (num1[i] != num2[i])
            return 0;
    }
    return 1;
}

 ===========================================================================
3.
#include<stdio.h>

char* reverseConsonants(char* str)
{
    char *pc1, *pc2;
    int i;
    pc1 = &str[0];
    for(i=0; str[i]!='\0';++i)
    {
    pc2 = &str[i-1];
}
    while(pc1!=pc2)
    {
      if((*pc1=='b')||(*pc1=='c')||(*pc1=='d')||(*pc1=='f')||(*pc1=='g'))||(*pc1=='h'))||(*pc1=='j'))||(*pc1=='k'))||(*pc1=='l'))||(*pc1=='m'))||(*pc1=='n'))||(*pc1=='p'))||(*pc1=='q'))||(*pc1=='r'))||(*pc1=='s'))||(*pc1=='t'))||(*pc1=='v'))||(*pc1=='w'))||(*pc1=='x'))||(*pc1=='y'))||(*pc1=='z'))
      {
        while(pc2!=pc1)
        {
            if((*pc1=='b')||(*pc1=='c')||(*pc1=='d')||(*pc1=='f')||(*pc1=='g'))||(*pc1=='h'))||(*pc1=='j'))||(*pc1=='k'))||(*pc1=='l'))||(*pc1=='m'))||(*pc1=='n'))||(*pc1=='p'))||(*pc1=='q'))||(*pc1=='r'))||(*pc1=='s'))||(*pc1=='t'))||(*pc1=='v'))||(*pc1=='w'))||(*pc1=='x'))||(*pc1=='y'))||(*pc1=='z'))
      {
              char temp;
              temp = *pc1;
              *pc1 = *pc2;
              *pc2 = temp;
              ++pc2;
              break;
            }
            else
              ++pc2;
        }
        ++pc1;
      }
      else
        ++pc1;
    }
    //return str;
    return NULL;
}
int main()
{
    char string[20], *pstr;
    scanf("%s", string);
    //pstr = reverseConsonants(string);
    //printf("%s", pstr);
    reverseConsonants(string);
    printf("%s", string);
    return 0;
}

======================================================================

4.
#include <stdio.h>
 
int gcd(int, int);
 
int main()
{
    int a, b, result;
 
    printf("Enter the two numbers to find their GCD: ");
    scanf("%d%d", &a, &b);
    result = gcd(a, b);
    printf("The GCD of %d and %d is %d.\n", a, b, result);
}
 
int gcd(int a, int b)
{
    while (a != b)
    {
        if (a > b)
        {
            return gcd(a - b, b);
        }
        else
        {
            return gcd(a, b - a);
        }
    }
    return a;
}

=========================================================================

5.
#include<stdio.h>
struct Node { 
    int data; 
    struct Node* next; 
}; 
void printNthFromLast(struct Node* head, int n) 
{ 
    int len = 0, i; 
    struct Node* temp = head; 
    while (temp != NULL) { 
        temp = temp->next; 
        len++; 
    }  
    if (len < n) 
        return; 
  
    temp = head;  
    for (i = 1; i < len - n + 1; i++) 
        temp = temp->next; 
  
    cout << temp->data; 
  
    return; 
} 
  
void push(struct Node** head_ref, int new_data) 
{
    struct Node* new_node = new Node();
    new_node->data = new_data; 
    new_node->next = (*head_ref)
    (*head_ref) = new_node; 
}
int main() 
{ 
    struct Node* head = NULL; 
    push(&head, 20); 
    push(&head, 4); 
    push(&head, 15); 
    push(&head, 35); 
  
    printNthFromLast(head, 4); 
    return 0; 
}

=========================================================================